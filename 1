1 
import math
def calculate_roots(a, b, c):
    discriminant = b**2 - 4*a*c
    if discriminant > 0:
        root1 = (-b + math.sqrt(discriminant)) / (2*a)
        root2 = (-b - math.sqrt(discriminant)) / (2*a)
        return root1, root2
    elif discriminant == 0:
        root = -b / (2*a)
        return root, root
    else:
        real_part = -b / (2*a)
        imaginary_part = math.sqrt(abs(discriminant)) / (2*a)
        root1 = complex(real_part, imaginary_part)
        root2 = complex(real_part, -imaginary_part)
        return root1, root2
a = float(input("Enter coefficient a: "))
b = float(input("Enter coefficient b: "))
c = float(input("Enter coefficient c: "))
roots = calculate_roots(a, b, c)
print("Roots of the quadratic equation are:", roots)




2
def find_character(string, char):
    index = -1
    for i in range(len(string)):
        if string[i] == char:
            index = i
    return index
str1= input("Enter a string: ")
char1 = input("Enter a character to search: ")
char_index = find_character(str1, char1)
if char_index != -1:
    print(f"The character '{char1}' is present at index: {char_index}")
else:
    print(f"The character '{char1}' is not present in the string.")



3
def roman_to_integer(roman):
    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
    total = 0
    prev_value = 0
    for char in reversed(roman):
        value = roman_dict[char]
        if value < prev_value:
            total -= value
        else:
            total += value
        prev_value = value
    return total

roman_numeral = input("Enter a Roman numeral: ")
integer_value = roman_to_integer(roman_numeral)
print("Integer value:", integer_value)




4
def is_pronic(number):
    for i in range(1, number):
        if i * (i + 1) == number:
            return True
    return False
num = int(input("Enter a number: "))
if is_pronic(num):
    print(num, "is a pronic number.")
else:
    print(num, "is not a pronic number.")




5
from bokeh.plotting import figure, show
from bokeh.io import output_notebook

pentagon = [(0, 0), (0.5, 1), (1.5, 1), (2, 0), (1, -1.5)]  # Define the coordinates for the pentagon
x = [1, 2, 3, 4, 5]
y = [6, 7, 2, 4, 5]

p = figure(title='Scatter Pentagon Marker', x_axis_label='X', y_axis_label='Y')

# Plot the pentagon using the patch glyph
p.patch([point[0] for point in pentagon], [point[1] for point in pentagon], color='navy', alpha=0.5)

# Plot the data points using the scatter glyph
p.scatter(x, y, marker='pentagon', size=20, color='navy')

output_notebook()
show(p)



6
import matplotlib.pyplot as plt
import numpy as np
data = np.random.rand(10, 10)
plt.figure(figsize=(8, 6))
heatmap = plt.imshow(data, cmap='hot', interpolation='nearest')
plt.colorbar(heatmap)
plt.title('Heatmap Plot')
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.show()




7
import matplotlib.pyplot as plt
study_hours = [2, 3, 4, 5, 6, 7, 8, 9, 10]
exam_scores = [65, 70, 75, 80, 85, 90, 92, 95, 98]
plt.figure(figsize=(8, 6))
plt.scatter(study_hours, exam_scores, color='blue')
plt.title('Relationship between Study Hours and Exam Scores')
plt.xlabel('Study Hours')
plt.ylabel('Exam Scores')
plt.grid(True)
plt.show()





8
import matplotlib.pyplot as plt
x_values = [0, 6]
y_values = [0, 250]
plt.figure(figsize=(8, 6))
plt.plot(x_values, y_values, color='red', linewidth=2)
plt.title('Line Plot from (0,0) to (6,250)')
plt.xlabel('X')
plt.ylabel('Y')
plt.grid(True)
plt.show()





9
import seaborn as sns
import matplotlib.pyplot as plt
data = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 40, 30, 20, 50, 60]
sns.histplot(data, bins=5, kde=True)  
plt.xlabel('Values')
plt.ylabel('Frequency')
plt.title('Histogram Plot')
plt.show()




10
import matplotlib.pyplot as plt
expenses = ['Rent', 'Food', 'Transportation', 'Utilities', 'Entertainment']
amounts = [1000, 600, 300, 400, 200]
plt.figure(figsize=(8, 8))
plt.pie(amounts, labels=expenses, autopct='%1.1f%%', startangle=140)
plt.title('Monthly Expenses Breakdown')
plt.axis('equal') # Equal aspect ratio ensures that pie is drawn as a circle. 
plt.show()
