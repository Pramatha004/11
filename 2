1 a
m1=int(input("Enter marks1: "))
m2=int(input("Enter marks2: "))
m3=int(input("Enter marks3: "))
if m1<=m2 and m1<=m3:
    avgmarks=(m2+m3)/2
elif m2<=m1 and m2<=m3:
    avgmarks=(m1+m3)/2
else:
    avgmarks=(m1+m2)/2
print("The average of best two marks is: ",avgmarks) 

1 b
val=int(input("Enter the value: "))
str_val=str(val)
if str_val==str_val[::-1]:
    print("Palindrome")
else:
    print("Not a palindrome")
for i in range(10):
    if str_val.count(str(i)):
        print(str(i),"appears",str_val.count(str(i)),"times")


2 a
def fn(n):
    if n==1:
       return 0
    elif n==2:
       return 1
    else:
       return fn(n-1)+fn(n-2)
num=int(input("Enter a number: "))
if num>0:
    print("fn(",num,")=",fn(num),sep="")
else:
    print("Error in input")

2 b
def bin2Dec(val):
   rev=val[::-1]
   dec=0
   i=0
   for dig in rev:
      dec+=int(dig)*2**i
      i+=1
   return dec
def oct2Hex(val):
   rev=val[::-1]
   dec=0
   i=0
   for dig in rev:
      dec+=int(dig)*8**i
      i+=1
   mylist=[]
   while(dec!=0):
      mylist.append(dec%16)
      dec//=16
   nl=[]
   for elem in mylist[::-1]:
      if elem<=9:
         nl.append(str(elem))
      else:
         nl.append(chr(ord('A')+(elem-10)))
      hexd="".join(nl)
   return hexd
num1=input("Enter a binary number: ")
print(bin2Dec(num1))
num2=input("Enter a octal number: ")
print(oct2Hex(num2))




3 a
sentence=input("Enter the text: ")
wordList=sentence.split(" ")
print("This sentence has",len(wordList),"words")
digcnt=locnt=upcnt=0
for ch in sentence:
   if '0'<=ch<='9':
      digcnt+=1
   elif 'A'<=ch<='Z':
      upcnt+=1
   elif 'a'<=ch<='z':
      locnt+=1
print("This sentence has",digcnt,"digits",upcnt,"uppercase letters",locnt,"lowercase letters")

3 b
str1=input("Enter string1: ")
str2=input("Enter string2: ")
if len(str1)<len(str2):
   short=len(str1)
   long=len(str2)
else:
   short=len(str2)
   long=len(str1)
matchcount=0
for i in range(short):
   if str1[i]==str2[i]:
      matchcount+=1
print(matchcount/long)




4 a
import matplotlib.pyplot as plt
plt.bar([1,3,5,7,9],[5,2,3,6,1],label="Data")
plt.legend()
plt.xlabel("x values")
plt.ylabel("height")
plt.title("Vertical bar plot")
plt.show()

4 b
import matplotlib.pyplot as plt
x=[1,2,3,4,5]
y=[10,20,30,40,50]
plt.scatter(x,y,c='blue')
plt.xlabel("x values")
plt.ylabel("height")
plt.title("Scatter plot")
plt.show()


5 a
import matplotlib.pyplot as plt
import numpy as np
a=np.array([1,5,9,17])
figure=plt.figure(figsize=(10,7))
plt.hist(a,bins=[0,2,10,20],color="green")
plt.show()

5 b
import matplotlib.pyplot as plt
stu=["Exe","Good","Avg","Poor"]
stdv=[15,20,50,25]
plt.pie(stdv,startangle=0,explode=[0.1,0.3,0.2,0.1],colors=["green","black","red","blue"],shadow=True,labels=stu)
plt.legend(title="Students",loc="center left",bbox_to_anchor=(1,0, 0.5, 1))
plt.show()





6 a
import matplotlib.pyplot as plt
x=[1,2,3,4,5]
y=[2,4,6,8,10]
plt.plot(x,y)
plt.show()

6 b
import matplotlib.pyplot as plt
import random
studentusn=['01','02','03','04','05','06','07','08','09','10']
marks=[]
for i in range(len(studentusn)):
   marks.append(random.randint(0,101))
plt.xlabel("USN")
plt.ylabel("Marks")
plt.title("Linear plotting student record")
plt.plot(studentusn,marks,color="green",linestyle="dashdot",marker="o",markerfacecolor="b",markersize=15)
plt.show()




7 a
import matplotlib.pyplot as plt
import seaborn as sns
data=sns.load_dataset("iris")
sns.lineplot(x="sepal_length",y="sepal_width",data=data)
sns.set_style("darkgrid")
plt.show()

7 b
import matplotlib.pyplot as plt
import seaborn as sns
tips=sns.load_dataset("tips")
sns.set(style="whitegrid")
ax=sns.barplot(x="day",y="total_bill",hue="sex",data=tips,ci=None)
ax.set_xlabel("Day of the Week")
ax.set_ylabel("Total bill($)")
ax.set_title("total bill by day and gender")
ax.legend(title="Gender")
plt.show()





8 a
from bokeh.plotting import figure,output_file,show
graph=figure(title="Bokeh line graph")
x=[1,2,3,4,5]
y=[5,4,3,2,1]
graph.line(x,x,legend_label="Line 1",line_color="green")
graph.line(y,x,legend_label="Line 2",line_color="red")
show(graph)

8 b
from bokeh.io import output_file as OF
from bokeh.io import show
from bokeh.layouts import row
from bokeh.plotting import figure as figs
fig1=figs(plot_width=400,plot_height=400,title="Plot 1")
fig1.line([1,2,3,4],[2,4,6,8],line_width=4)
x=y=list(range(10))
fig2=figs(plot_width=400,plot_height=400,title="Plot 2")
fig2.circle(x,y,size=5)
show(row(fig1,fig2))





9 a
import plotly.express as px
df=px.data.iris()
fig=px.scatter_3d(df,x="sepal_width",y="sepal_length",z="petal_width",size="petal_length",color="species",size_max=20,opacity=0.5)
fig.show()






10 a
import pandas as pd
import plotly.express as px
tsla=pd.read_csv("C:\\Users\\Admin\\Documents\\tesla.csv")
tsla.head()
fig=px.line(tsla,x="Date",y="Close")
fig.show()

10 b
import plotly.express as px
import pandas as pd
data=pd.read_csv("https://raw.githubusercontent.com/plotly/datasets/master/gapminder_with_codes.csv")
fig=px.choropleth(data,locations='iso_alpha',color='gdpPercap',hover_name='country',projection='natural earth',title='GDP per capita by country')
fig.show()
